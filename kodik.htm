<!DOCTYPE html>
<html lang="ru">

<head>
  <meta charset="UTF-8">
</head>

<body>
  <div id="control_butons">
    <div id="resume_butons">
      <div class="_button" id="resume_buton" title="Воспроизведёт следующую серию после последней просмотренной">
        Продолжить +1</div>
    </div>
    <div id="scroll_butons" class="hidden">
      <div class="_button" id="-90" title="Перемотает назад на примерную динну опенинга">
        -90с </div>
      <div class="_button" id="+90" title="Перемотает вперёд на примерную динну опенинга">90с</div>
    </div>
    <div id="panel_info_control">
      <h2>Управление</h2>
      <div class="controls-grid">
        <span class="key">Space</span><span class="desc">Плей-пауза</span>
        <span class="key">←</span><span class="desc">Перемотка назад на 10 сек</span>
        <span class="key">→</span><span class="desc">Перемотка вперёд на 10 сек</span>
        <span class="key">↑</span><span class="desc">Увеличить громкость</span>
        <span class="key">↓</span><span class="desc">Уменьшить громкость</span>
        <span class="key">A</span><span class="desc">Перемотка назад на 90 сек</span>
        <span class="key">D</span><span class="desc">Перемотка вперёд на 90 сек</span>
      </div>
    </div>

  </div>
  <iframe id="kodik" src="loading.htm" frameborder="no" allow="autoplay *; fullscreen *"></iframe>
</body>
<style>
  body {
    background-color: rgb(32, 32, 32);
    margin: 0 0 0 0;
  }

  .hidden {
    display: none !important;
  }

  #kodik {
    position: fixed;
    width: 100%;
    height: 100%;
    border: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
    aspect-ratio: 16/9;
  }

  #control_butons {
    position: fixed;
    left: 0;
    right: 0;
    z-index: 1000;
    pointer-events: none;
    display: flex;
    align-items: center;
    flex-direction: column;
  }

  #scroll_butons {
    display: flex;
  }

  ._button {
    color: aliceblue;
    background-color: #2b3035;
    /* border-top-left-radius: 3px; */
    /* border-top-right-radius: 3px; */
    border-bottom-right-radius: 3px;
    border-bottom-left-radius: 3px;
    padding: 1ch;
    cursor: pointer;
    font: 700 12px / 30px Arial;
    pointer-events: auto;
  }

  ._button:hover {
    background-color: #363d43;
  }

  #panel_info_control {
    color: aliceblue;
    background-color: #2b3035;
    border-radius: 3px;
    padding: 1ch;
    cursor: pointer;
    font: 700 12px / 30px Arial;
    /* pointer-events: auto; */
    margin: 3px;
  }

  #panel_info_control h2 {
    color: #00b7ff;
    /* Голубой для заголовка */
    font-size: 1.2em;
    margin: 0 0 0 0;
    text-align: center;
    text-transform: uppercase;
  }

  .controls-grid {
    display: grid;
    grid-template-columns: 50px 1fr;
    /* Фиксированная ширина для клавиш, остальное для описания */
    /* gap: 10px; Отступ между строками и столбцами */
    align-items: center;
  }

  .controls-grid .key {
    color: #ffcc00;
    /* Жёлтый для клавиш */
    text-align: center;
    font-weight: 700;
  }

  .controls-grid .desc {
    color: aliceblue;
    font-weight: 400;
    /* Чуть легче шрифт для описания */
  }
</style>


<script>

  var url_get = new URL(window.location.href)
  const MyServerURL = url_get.searchParams.get('MyServerURL') ? url_get.searchParams.get('MyServerURL') : 'server.dygdyg.ru' //'dygdyg.duckdns.org'
  const time_op = 88
  var kodik = document.createElement("iframe");
  var BaseAnimeCurrent = JSON.parse(localStorage.getItem('BaseAnimeCurrent')) || {};
  var data_anime
  var kodikIframe
  var shikimori_id = url_get.searchParams.get('shikimori_id') ? url_get.searchParams.get('shikimori_id') : 50346
  var start_load = false



  // Screen.lockOrientation("landscape")

  start()

  async function start() {
    await anim_data()
    await start_kodik()
    await media_player()
  }

  /////////////////////////////////////////////// Подгрузка базы данных аниме ///////////////////////////////////////////////////
  async function anim_data() {
    var url_serch = `https://${MyServerURL}/kodik.php?method=search&limit=1&with_material_data=true&shikimori_id=${shikimori_id}`
    if (BaseAnimeCurrent[shikimori_id]) {
      url_serch = `${url_serch}&translation_id=${BaseAnimeCurrent[shikimori_id].translation.id}`
    }

    const response = await fetch(url_serch);
    data = await response.json(response);
    data_anime = data.results[0]
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


  /////////////////////////////////////////////// Запуск плеера в iframe /////////////////////////////////////////////////////////
  async function start_kodik() {
    window.label = {
        title:"Track Anime By DygDyg",
        state: `Cерии: ${data_anime.material_data.episodes_aired || "?"}/${data_anime.material_data.episodes || data_anime.material_data.episodes_total || "?"}`,
        details: data_anime.title,
        timestamps: {start: Math.floor(Date.now() / 1000)+999999}
    }


    var get_sav_url_data = "&season=1&episode=1"
    if (BaseAnimeCurrent[shikimori_id]) {
      get_sav_url_data = `&season=${BaseAnimeCurrent[shikimori_id].season}&episode=${BaseAnimeCurrent[shikimori_id].episode}`
    }
    // var url = url_get.searchParams.get('url') ? url_get.searchParams.get('url') :"https://kodik.cc/find-player"
    var url = data_anime.link ? data_anime.link : "https://kodik.cc/find-player"
    document.getElementById("kodik").src = `${url}?shikimoriID=${shikimori_id}${get_sav_url_data}`


    if (window.addEventListener) {
      window.addEventListener('message', kodikMessageListener);
    } else {
      window.attachEvent('onmessage', kodikMessageListener);
    }

    kodikIframe = document.getElementById("kodik").contentWindow;

    document.addEventListener('keydown', (e) => {
      switch (e.code) {
        case "ArrowLeft":
          kodik_player_api({ method: "seek", seconds: navigator.mediaSession.metadata.time - 10 })
          navigator.mediaSession.metadata.time = navigator.mediaSession.metadata.time - 10
          break;

        case "ArrowRight":
          kodik_player_api({ method: "seek", seconds: navigator.mediaSession.metadata.time + 10 })
          navigator.mediaSession.metadata.time = navigator.mediaSession.metadata.time + 10
          break;

        case "ArrowUp":
          // kodik_player_api({ method: "volume", volume: +0.7 })
          kodik_player_api({ method: "volume", volume: navigator.mediaSession.metadata.volume + 0.1 })
          navigator.mediaSession.metadata.volume = navigator.mediaSession.metadata.volume + 0.1
          break;

        case "ArrowDown":
          // kodik_player_api({ method: "volume", volume: -0.7 })
          kodik_player_api({ method: "volume", volume: navigator.mediaSession.metadata.volume - 0.1 })
          navigator.mediaSession.metadata.volume = navigator.mediaSession.metadata.volume - 0.1
          break;

        case "KeyA":
          kodik_player_api({ method: "seek", seconds: navigator.mediaSession.metadata.time - time_op })
          navigator.mediaSession.metadata.time = navigator.mediaSession.metadata.time - time_op
          break;

        case "KeyD":
          kodik_player_api({ method: "seek", seconds: navigator.mediaSession.metadata.time + time_op })
          navigator.mediaSession.metadata.time = navigator.mediaSession.metadata.time + time_op

          break;

        case "Space":
          navigator.mediaSession.metadata.isPlay ? kodik_player_api({ method: "pause" }) : kodik_player_api({ method: "play" })
          break;
        case "1":

          break;

        default:
          break;
      }
    }
    );

    setInterval(() => {
      if(navigator.userAgent.toLowerCase().includes('iphone')||navigator.userAgent.toLowerCase().includes('android')) return // Последний фикс-хуикс для дерил, остапльные по подписке
      window.focus();   ////////////////////////////// Костыль чтоб забирать фокус у плеера по кд
    }, 1000);

    document.getElementById("kodik").addEventListener('load', () => {
      if (start_load == false) {
        if (BaseAnimeCurrent[shikimori_id]) kodik_player_api(
          {
            method: "change_episode",
            season: BaseAnimeCurrent[shikimori_id].season,
            episode: BaseAnimeCurrent[shikimori_id].episode
          }
        )
        start_load = true
      }
    })

    document.getElementById("resume_buton").addEventListener('click', function (event) {

      if (BaseAnimeCurrent[shikimori_id]) {
        kodik_player_api(
          {
            method: "change_episode",
            season: BaseAnimeCurrent[shikimori_id].season,
            episode: BaseAnimeCurrent[shikimori_id].episode
          }
        )
        kodik_player_api(
          {
            method: "change_episode",
            season: BaseAnimeCurrent[shikimori_id].season,
            episode: BaseAnimeCurrent[shikimori_id].episode + 1
          }
        )
      }
      document.getElementById("resume_buton").classList.add("hidden")
      setTimeout(() => {
        kodik_player_api({
          method: "play"
        })
      }, 1500);

    })

  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

  ////////////////////////////////////////////// Перемотка 90 секунд ///////////////////////////////////////////////////////////

  document.getElementById("+90").addEventListener('click', function (event) {
    scroll_video(90)
  }
  )
  document.getElementById("-90").addEventListener('click', function (event) {
    scroll_video(-90)
  }
  )

  function scroll_video(p) {
    // kodikIframe.postMessage({ key: "kodik_player_api", value: { method: "seek", seconds: navigator.mediaSession.metadata.time + p } }, '*');
    kodik_player_api({ method: "seek", seconds: navigator.mediaSession.metadata.time + p })
  }


  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


  /////////////////////////////////////////////// Управление kodik_player ///////////////////////////////////////////////////////
  function kodikMessageListener(message) {
    // if (message.data.title == "mousemove") return
    switch (message.data.key) {
      case 'kodik_player_volume_change':
        navigator.mediaSession.metadata.volume = message.data.value.volume
        break
      case "kodik_player_play":
        navigator.mediaSession.metadata.isPlay = true
        document.getElementById("resume_buton").classList.add("hidden")
        document.getElementById("panel_info_control").classList.add("hidden")
        //document.getElementById("scroll_butons").classList.remove("hidden")
        kodik_player_api({ method: "volume", volume: navigator.mediaSession.metadata.volume })
        break
      case "kodik_player_pause":
        navigator.mediaSession.metadata.isPlay = false
        // document.getElementById("resume_buton").classList.remove("hidden")
        window.parent.label = {
          title: "Track Anime By DygDyg",
          state: `${navigator.mediaSession.metadata.artist} | ▐▐`,
          details: window.parent.label.details,
          // timestamps: { start: Math.floor(Date.now() / 1000)-navigator.mediaSession.metadata.time }
          timestamps: { start: Math.floor(Date.now() / 1000)+999999 },
          time: Date.now()
        }
        break
      case "kodik_player_time_update":
        navigator.mediaSession.metadata.time = message.data.value;
        window.parent.label = {
          title: "Track Anime By DygDyg",
          state: `${navigator.mediaSession.metadata.artist} | ►`,
          details: window.parent.label.details,
          timestamps: { start: Math.floor(Date.now() / 1000)-navigator.mediaSession.metadata.time },
          time: Date.now()
        }
        break
      case "kodik_player_seek":
        

        break
      case "kodik_player_current_episode":

        navigator.mediaSession.metadata.time = 0;
        navigator.mediaSession.metadata.artist = `Серия: ${message.data.value.episode}`
        // delete BaseAnimeCurrent[null];
        if (data_anime.material_data.episodes_total == message.data.value.episode) {
          delete BaseAnimeCurrent[shikimori_id];
          BaseAnimeCurrent["lasttime"] = new Date().getTime() / 1000
        } else {
          BaseAnimeCurrent[shikimori_id] = message.data.value;
          BaseAnimeCurrent[shikimori_id]["material_data"] = data_anime.material_data
          BaseAnimeCurrent[shikimori_id]["lasttime"] = new Date().getTime() / 1000
          BaseAnimeCurrent["lasttime"] = new Date().getTime() / 1000
        }
        localStorage.setItem('BaseAnimeCurrent', JSON.stringify(BaseAnimeCurrent));
        console.log(message)
        window.parent.label = {
          title: "Track Anime By DygDyg",
          state: `Серия: ${message.data.value.episode}`,
          details: window.parent.label.details,
          timestamps: { start: Math.floor(Date.now() / 1000)-navigator.mediaSession.metadata.time },
          time: Date.now()
        }
        break;

      default:
        break;
    }

  }



  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ///////////////////////////////////////////////  Управление плеером через пост   /////////////////////////////////////////////// 

  async function kodik_player_api(e) {
    kodikIframe.postMessage({ key: "kodik_player_api", value: e }, '*');
  }


  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ///////////////////////////////////////////////  Настройка Media Session API   /////////////////////////////////////////////// 
  async function media_player() {
    if ('mediaSession' in navigator) {

      navigator.mediaSession.metadata = new MediaMetadata({
        title: data_anime.material_data.title,
        artist: ``,
        album: '',
        artwork: [{ src: data_anime.material_data.poster_url }]
      });

      navigator.mediaSession.metadata.time = 0;
      navigator.mediaSession.metadata.volume - 1;
      navigator.mediaSession.metadata.isPlay = false;
      navigator.mediaSession.setActionHandler('play', () => {
        navigator.mediaSession.metadata.isPlay ? kodik_player_api({ method: "pause" }) : kodik_player_api({ method: "play" })
        console.log('Воспроизведение');
      });

      navigator.mediaSession.setActionHandler('pause', () => {
        // kodik_player_api({ method: "pause" });
        navigator.mediaSession.metadata.isPlay ? kodik_player_api({ method: "pause" }) : kodik_player_api({ method: "play" })
      });
      navigator.mediaSession.setActionHandler('stop', () => {
        kodikIframe.postMessage({ key: "kodik_player_api", value: { method: "pause" } }, '*');
      });

      navigator.mediaSession.setActionHandler('previoustrack', () => {
        console.log('Перемотка назад');
        kodikIframe.postMessage({ key: "kodik_player_api", value: { method: "seek", seconds: navigator.mediaSession.metadata.time - time_op } }, '*');
      });

      navigator.mediaSession.setActionHandler('nexttrack', () => {
        console.log('Перемотка вперед');
        kodikIframe.postMessage({ key: "kodik_player_api", value: { method: "seek", seconds: navigator.mediaSession.metadata.time + time_op } }, '*');
      });
    } else {
      console.log('Media Session API не поддерживается');
    }
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
</script>

</html>